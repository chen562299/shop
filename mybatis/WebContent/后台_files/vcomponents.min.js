vue_utils=(function(){var a;function b(c,d,e){this.$children.forEach(function(g){var f=g.$options.name;if(f===c){g.$emit.apply(g,[d].concat(e))}else{b.apply(g,[c,d].concat([e]))}})}a={dispatch:function(f,c,d,h){var g=f.$parent||f.$root;var e=g.$options.name;while(g&&(!e||e!==c)){g=g.$parent;if(g){e=g.$options.name}}if(g){g.$emit.apply(g,[d].concat(h))}},broadcast:function(e,c,d,f){b.call(e,c,d,f)},findComponentUpward:function(e,c,g){if(typeof c==="string"){g=[c]}else{g=c}var f=e.$parent;var d=f.$options.name;while(f&&(!d||g.indexOf(d)<0)){f=f.$parent;if(f){d=f.$options.name}}return f},findComponentsDownward:function(d,c,e){var e=e||[];var f=d.$children;if(f.length){f.forEach(function(j){var g=j.$options.name;var i=j.$children;if(g===c){e.push(j)}if(i.length){var h=findComponentsDownward(j,c,e);if(h){e.concat(h)}}})}return e},oneOf:function(e,d){for(var c=0;c<d.length;c++){if(e===d[c]){return true}}return false}};return a})();
/*!
 * 按钮组件
 * 页面插入：<btn-component type="ClassName" icon="ClassName" :disabled="Boolean" :active="Boolean" @click="log">按钮</btn-component>
 * 可选参数：type | icon | disabled | active | @click
 * type : global-oper(用于保存、取消等全局操作按钮)
 * @click : log是外部定义方法，点击按钮通知调用外部方法log
 *
 * https://cn.vuejs.org/v2/guide/components.html#什么是组件？
 * Reference：https://www.iviewui.com/components/button
 * Depends: vue.js
 */
(function(){var a="jz-btn";Vue.component("btn-component",{template:'<button :id="id" :disabled="disabled" @click="handleClick" :class="classes"><i v-if="icon" :class="iClasses"></i><span v-if="showSlot"><slot></slot></span></button>',props:{id:String,type:String,icon:String,disabled:Boolean,active:Boolean},data:function(){return{showSlot:true}},methods:{handleClick:function(b){this.$emit("click",b)}},computed:{classes:function(){var b={};b[a]=true;b[a+"-"+this.type]=!!this.type;b[a+"-icon"]=!!this.icon;b[a+"-active"]=this.active;return b},iClasses:function(){var b={};b["jz-icon"]=true;b["jz-icon-"+this.icon]=!!this.icon;b[this.icon]=!!this.icon;return b}},mounted:function(){}})}());
/*!
 * input组件
 * 页面插入：<input-component :value="String" :maxlength="Number" :readonly="readonly" :unit="String" :number="Boolean" :disabled="Boolean" icon="ClassName(String)" @click="callback"></input-component>
 * 可选参数：classes | id | pattern | value | maxlength | readonly | unit | number | disabled | placeholder | icon | @click

 * classes：自定义input class
 * id：自定义input id
 * pattern：自定义input样式
 * value：String, input初始值value
 * maxlength：Number, 限制input的输入字符
 * readonly：Boolean, 是否只读
 * unit：String, 鼠标blur时给input加的单位，如“px”
 * number：Boolean, 现在输入的类型为数字，否则置空
 * disabled：Boolean, 是否禁用
 * placeholder：String, input里的提示文字
 * icon：String, input里点击可删除输入值的图标按钮,可传入类去覆盖默认jz-input-icon的背景
 * focusicon：String, input里focus的图标按钮
 * @click：callback
 *
 * https://cn.vuejs.org/v2/guide/components.html#什么是组件？
 * Reference：https://github.com/iview/iview/blob/2.0/src/components/input/input.vue
 * Depends: vue.js
 */
(function(){var a="jz-input";Vue.component("input-component",{name:"Input",template:'<div :class="wrapClasses"><input ref="input" :id="id" type="text" :maxlength="maxlength" :readonly="readonly" :class="inputClasses" :placeholder="placeholder" :value="currentValue" :unit="unit" :disabled="disabled" :number="number" @click="handleInputClick" @input="handleInput" @focus="handleFocus" @blur="handleBlur"><i v-if="icon" :class="iClasses" @click="clickIcon"></i></div>',props:{id:String,classes:String,pattern:String,maxlength:Number,readonly:Boolean,type:String,placeholder:String,disabled:Boolean,icon:String,focusicon:String,value:[String,Number],number:Boolean,unit:String},data:function(){return{currentValue:this.value,showUnit:false}},methods:{handleInputClick:function(b){this.$emit("click",b)},handleInput:function(c){var d=c.target.value;var b=d.trim();if(this.number&&b!==""){b=Number.isNaN(Number(b))?"":Number(b)}if(b!==d){this.setCurrentValue(b);this.$refs.input.value=b}this.$emit("input",b);this.$emit("on-change",c)},handleFocus:function(b){if(!!this.unit){this.$refs.input.value=b.target.value.replace(this.unit,"");this.showUnit=false}this.$emit("on-focus",b)},handleBlur:function(b){if(!!this.unit&&b.target.value!==""){this.$refs.input.value=b.target.value+this.unit;this.showUnit=true}this.$emit("on-blur",b)},clickIcon:function(b){this.$emit("on-click-icon",b)},setCurrentValue:function(b){if(this.number&&b!==""){b=Number.isNaN(Number(b))?"":Number(b)}this.currentValue=b},},computed:{wrapClasses:function(){var b={};b[a+"-wrapper"]=true;b[a+"-"+this.type]=!!this.type;return b},inputClasses:function(){var b={};b[a]=true;b[this.classes]=!!this.classes;return b},iClasses:function(){var b={};b[a+"-icon"]=true;b[this.icon]=!!this.icon;b[this.focusicon]=!!this.focusicon;return b}},mounted:function(){if(!!this.pattern){this.$refs.input.style.cssText+=this.pattern}if(!!this.value&&!!this.unit){this.$refs.input.value=this.value+this.unit}}})}());
/*!radio组件
 *	页面插入（选项组示例，具体例子可参照banner 2.0 的编辑页的高级设置）：
 *	<radio-group-component v-model="？" v-on:on-change="？">
 *		<radio-component label="？" >？</radio-component>
 *		<radio-component label="？" >？</radio-component>
 *	</radio-group-component>
 * 
 * 单独使用: 使用 v-model 可以双向绑定数据。
 * 组合使用: 使用Radio-group实现一组互斥的选项组。在组合使用时，Radio 使用 label 来自动判断。每个 Radio 的内容可以自定义，如不填写则默认使用 label 的值。详见radio-group.js
 * 属性参数如下：
 * 		value：	只在单独使用时有效。可以使用 v-model 双向绑定数据	Boolean
 *		label：	只在组合使用时有效。指定当前选项的 value 值，组合会自动判断当前选择的项目	String | Number	
 *		disabled：  是否禁用当前项  Boolean   
 * 事件：响应父组件事件
 * input
 * on-change        
 */
(function(){var a="jz-radio";Vue.component("radio-component",{name:"Radio",template:'<label :disabled="disabled" :class="wrapClasses" ><span :class="radioClasses"><span :class="innerClasses"></span><input type="radio" :class="inputClasses" :checked="currentValue" @change="change"></span><slot>{{ label }}</slot></label>',props:{value:Boolean,label:{type:[String,Number]},disabled:Boolean},data:function(){return{currentValue:this.value,group:false,parent:vue_utils.findComponentUpward(this,"RadioGroup")}},computed:{wrapClasses:function(){var b={};b[a+"-wrapper"]=true;b[a+"-group-item"]=!!this.group;b[a+"-wrapper-checked"]=!!this.currentValue;return b},radioClasses:function(){var b={};b[a]=true;b[a+"-checked"]=!!this.currentValue;return b},innerClasses:function(){return a+"-inner"},inputClasses:function(){return a+"-input"}},mounted:function(){if(this.parent){this.group=true}if(!this.group){this.updateValue()}else{this.parent.updateValue()}},methods:{change:function(c){if(this.disabled){return false}var b=c.target.checked;this.currentValue=b;this.$emit("input",b);if(this.group&&this.label!==undefined){this.parent.change({value:this.label,checked:this.value})}if(!this.group){this.$emit("on-change",b)}},updateValue:function(){this.currentValue=this.value}},watch:{value:function(){this.updateValue()}}})}());
/*!
 * radio-group组件
 */
(function(){var a="jz-radio-group";Vue.component("radio-group-component",{name:"RadioGroup",template:'<div :class="classes"><slot></slot></div>',props:{value:{type:[String,Number]}},data:function(){return{currentValue:this.value,childrens:[]}},computed:{classes:function(){return a}},mounted:function(){this.updateValue()},methods:{updateValue:function(){var b=this.value;this.childrens=vue_utils.findComponentsDownward(this,"Radio");if(this.childrens){this.childrens.forEach(function(c){c.currentValue=b==c.label;c.group=true})}},change:function(b){this.currentValue=b.value;this.updateValue();this.$emit("input",b.value);this.$emit("on-change",b.value)}},watch:{value:function(){this.updateValue()}}})}());
/*! switch组件
 * 
 * 属性参数如下：
 * 		value：	只在单独使用时有效。可以使用 v-model 双向绑定数据	Boolean
 *		disabled：  禁用开关  Boolean   
 * 事件：响应父组件事件
 * on-change      
 *
 * slot: 分发自定义内容
 *
 * open：   自定义显示打开时的内容
 * close：	自定义显示关闭时的内容 
 */
(function(){var a="jz-switch";Vue.component("switch-component",{name:"Switch",template:'<span :class="wrapClasses" @click="toggle"><span :class="innerClasses"><slot name="open" v-if="currentValue"></slot><slot name="close" v-if="!currentValue"></slot></span></span>',props:{value:Boolean,disabled:Boolean},data:function(){return{currentValue:this.value}},computed:{wrapClasses:function(){var b={};b[a]=true;b[a+"-checked"]=!!this.currentValue;b[a+"-disabled"]=!!this.disabled;return b},innerClasses:function(){return a+"-inner"}},methods:{toggle:function(){if(this.disabled){return false}var b=!this.currentValue;this.currentValue=b;this.$emit("input",b);this.$emit("on-change",b)}},watch:{value:function(b){this.currentValue=b}}})}());
/*!
 * table组件
 * 页面插入：<faitable :options="options"></faitable>
 * options 结构
 *  |- columns = [
 *  |      key : 键名，
 *  |      name : 显示的类名，
 *  |      extData : function(back, data)
 *  |  ]
 *  |- filter = [{k: key, v: value, t: type}]
 *  |- showFooter = true
 *  |- tableData
 *      |- isChecked 是否选中
 *      |- isDisable 是否不可选
 *  |- isOpenCheck = false(默认不显示checkBox)
 *  |- noData 没有数据的时候展示
 * https://cn.vuejs.org/v2/guide/components.html#什么是组件？
 * Depends: vue.js
 */
(function(){Vue.component("faitable",{props:["options"],data:function(){return{pageNum:1,isSelectAll:false,isDisableAll:false,pageSize:15,id:0}},computed:{filterList:function(){var b=this.options.filter,c=this.options.tableData,a=true;if(b.length==0||!this.options.showFooter){$.each(c,function(e,f){if(!f.isDisable){a=false;return false}});this.isDisableAll=a;return this.options.tableData}var d=$.grep(c,function(f){var e=false;$.each(b,function(g,h){if(h.t=="eq"){if(f[h.k]==h.v){e=true}else{e=false;return false}}else{if(h.t=="lk"){if(f[h.k]){if(f[h.k].indexOf(h.v)>=0){e=true}else{e=false;return false}}}}});if(e&&!f.isDisable&&a){a=false}return e});this.isDisableAll=a;return d},totalSize:function(){return this.filterList.length},pageList:function(){var a=this.pageSize,c=this.pageNum,d=this.filterList;var b=(c*a<d.length)?c*a:d.length,e=(c-1)*a;return d.slice(e,b)}},template:'<div class="jz-table" v-if="options.columns.length > 0"><div class="jz-table-header"><div class="jz-table-column jz-checkbox-column" v-if="options.isOpenCheck"><div class="jz-select-box" :class="[{jzSelected:isSelectAll&&!isDisableAll},{jzDisabled:isDisableAll}]" @click="changeAllCheck"></div></div><div class="jz-table-column" :class="[column.colClass]" v-for="(column, j) in options.columns" :key="column.key" >{{column.name}}</div></div><div class="jz-table-content"><slot><div class="jz-table-row" v-for="(item, i) in pageList" :key="item.id"><div class="jz-table-column jz-checkbox-column" v-if="options.isOpenCheck"><div class="jz-select-box" :class="[{jzSelected:item.isChecked&&!item.isDisable},{jzDisabled:item.isDisable}]" @click="changeCheck(item)"></div></div><div class="jz-table-column" :class="[\'column\'+j, column.colClass, column.rowClass]" v-for="(column, j) in options.columns" v-html="column.extData?column.extData(item[column.key], item):item[column.key]"></div></div><div v-if="pageList.length==0" v-html="options.noData"></div></slot></div><div class=\'jz-table-footer\' v-if=\'options.showFooter\'><div class=\'jz-footer-line\'><div class=\'jz-footer-left\'>本页共{{pageList.length}}个 总共{{totalSize}}个</div><div class=\'jz-footer-right\'><div class=\'jz-page-select-icon\'></div><span>每页显示个数：</span><select class=\'jz-page-select\' v-model.number=\'pageSize\'><option value=\'15\'>15</option><option value=\'30\'>30</option><option value=\'45\'>45</option><option value=\'60\'>60</option></select><div class=\'J_tablePageNumSelect\'></div></div></div><pagenation :totalSize=\'totalSize\' :pageSize=\'pageSize\' @chagePage=\'changePageEvt\'></pagenation></div></div>',create:function(){this.options.tableData=this.options.tableData||[];this.options.showFooter=this.options.showFooter||true;this.options.columns=this.options.filter||[];this.options.isOpenCheck=this.options.isOpenCheck||false;this.options.noData=this.options.noData||""},updated:function(){if(this.options.updateEvt){this.options.updateEvt()}},methods:{changePageEvt:function(a){this.filterList.forEach(function(c,b){if(c.isChecked){c.isChecked==false}});this.pageNum=a},changeCheck:function(b){if(typeof b.isChecked=="undefined"){this.$set(b,"isChecked",false)}if(!b.isDisable){b.isChecked=!b.isChecked}var d=this,a=false,c=true;d.pageList.some(function(f,e,g){if(!f.isChecked&&!f.isDisable){c=false;a=true;return true}});d.isSelectAll=c},changeAllCheck:function(a){var b=this;if(b.isDisableAll){return}b.isSelectAll=!b.isSelectAll;b.pageList.forEach(function(d,c){if(!d.isDisable){if(typeof d.isChecked=="undefined"){b.$set(d,"isChecked",false)}d.isChecked=b.isSelectAll}})}}});Vue.component("pagenation",{props:{totalSize:Number,pageSize:Number},data:function(){return{currentSize:1,pageNum:1,jumptoIndex:1}},computed:{pageList:function(){var b=[];for(var a=this.viewStart;a<=this.viewEnd;a++){b.push(a)}return b},viewStart:function(){return(this.pageNum-2<=0)?1:(this.pageNum-2)},viewEnd:function(){return(this.pageNum+2>this.maxPage)?this.maxPage:(this.pageNum+2)},maxPage:function(){return parseInt((this.totalSize-1)/this.pageSize)+1}},methods:{pagenationEvt:function(a){if(this.pageNum==a){return}if(a<1){a=1}else{if(a>this.maxPage){a=this.maxPage}}this.pageNum=a;this.$emit("chagePage",a)},jumptoClick:function(){this.pagenationEvt(this.jumptoIndex)}},template:"<div class='jz-pagenation'><div class='jz-page-content'><div class='jz-page-item'><div class='jz-page-num-item jz-page-w55' @click='pagenationEvt(1)'>首页</div><div class='jz-page-num-item jz-page-w92' v-if='pageNum>1' @click='pagenationEvt(pageNum-1)'>&lt;&lt;上一页</div><div class='jz-page-num-item' v-if='pageNum-1>5 && 1!=viewStart' @click='pagenationEvt(1)'>1</div><div class='jz-page-num-item jz-page-num-hide' v-if='viewStart>2'>...</div><div class='jz-page-num-item' :class='{jzPageNumCurrent : pageNum==pageNo}' v-for='pageNo in pageList' @click='pagenationEvt(pageNo)'>{{pageNo}}</div><div class='jz-page-num-item jz-page-num-hide' v-if='viewEnd<maxPage-1'>...</div><div class='jz-page-num-item' v-if='pageNum-maxPage>5&&maxPage!=viewEnd' @click='pagenationEvt(maxPage)'>{{maxPage}}</div><div class='jz-page-num-item jz-page-w92' v-if='pageNum<maxPage' @click='pagenationEvt(pageNum+1)'>下一页&gt;&gt;</div><div class='jz-page-num-item jz-page-w55' @click='pagenationEvt(maxPage)'>尾页</div></div><div class='jz-page-item'>共{{maxPage}}页</div><div class='jz-page-item'>到第<input type='text' class='jz-page-input' oninput='this.value=this.value.replace(/[^0-9]+/g,\"\");' v-model='jumptoIndex'/>页</div><div class='jz-page-btn' @click='jumptoClick'>确定</div></div></div>"})}());
/*!photo组件(其实就是选中的一些效果)
 *	页面插入：
 *	<photo-group-component v-model="？" v-on:on-change="？">
 *		<photo-component label="？" >？</photo-component>
 *		<photo-component label="？" >？</photo-component>
 *	</photo-group-component>
 * 
 * 单独使用: 使用 v-model 可以双向绑定数据。
 * 组合使用: 使用 Photo-group实现一组互斥的选项组。在组合使用时，Photo 使用 label 来自动判断。每个 Photo 的内容可以自定义，如不填写则默认使用 label 的值。详见photo-group.js
 * 属性参数如下：
 * 		value：	只在单独使用时有效。可以使用 v-model 双向绑定数据	Boolean
 *		label：	只在组合使用时有效。指定当前选项的 value 值，组合会自动判断当前选择的项目	String | Number	| Boolean	
 *		type :  选中的类型，现在传type='warn',有提供警示性选中提示
 *      size：  选中右下角的图片大小，现在提供两种尺寸，small和large
 * 事件：响应父组件事件
 * 
 * on-change        
 */
(function(){var a="jz-photo";Vue.component("photo-component",{name:"Photo",template:'<label :class="wrapClasses"><input type="radio" :class="inputClasses" :checked="currentValue" @change="change"><slot></slot></label>',props:{label:{type:[String,Number,Boolean]},type:String,size:{validator:function(b){return vue_utils.oneOf(b,["small","large"])}},value:Boolean},data:function(){return{currentValue:this.value,group:false,parent:vue_utils.findComponentUpward(this,"PhotoGroup")}},mounted:function(){if(this.parent){this.group=true}if(!this.group){this.updateValue()}else{this.parent.updateValue()}},computed:{wrapClasses:function(){var b={};b[a+"-wrapper"]=true;b[a+"-group-item"]=!!this.group;b[a+"-checked"]=!!this.currentValue;b[a+"-"+this.type]=!!this.type;b[a+"-"+this.size]=!!this.size;return b},inputClasses:function(){return"jz-radio-input"}},methods:{change:function(c){var b=c.target.checked;this.currentValue=b;this.$emit("input",b);if(this.group&&this.label!==undefined){this.parent.change({value:this.label,checked:this.value})}if(!this.group){this.$emit("on-change",b)}},updateValue:function(){this.currentValue=this.value}},watch:{value:function(){this.updateValue()}}})}());
/*!
 * photo-group组件
 */
(function(){var a="jz-photo-group";Vue.component("photo-group-component",{name:"PhotoGroup",template:'<div :class="classes"><slot></slot></div>',props:{value:{type:[String,Number]}},data:function(){return{currentValue:this.value,childrens:[]}},computed:{classes:function(){return a}},mounted:function(){this.updateValue()},methods:{updateValue:function(){var b=this.value;this.childrens=vue_utils.findComponentsDownward(this,"Photo");if(this.childrens){this.childrens.forEach(function(c){c.currentValue=b==c.label;c.group=true})}},change:function(b){this.currentValue=b.value;this.updateValue();this.$emit("input",b.value);this.$emit("on-change",b.value)}},watch:{value:function(){this.updateValue()}}})}());